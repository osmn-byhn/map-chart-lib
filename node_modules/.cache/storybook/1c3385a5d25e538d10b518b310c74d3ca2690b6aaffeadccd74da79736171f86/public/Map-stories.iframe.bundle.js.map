{"version":3,"file":"Map-stories.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AAGA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAOA;AAEA;;;;;;;;;;;;;;;;;ACjKA;AACA;;AAGA;;AAWA;AACA;AACA;AACA;AACA;AAAA;AAUA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAAA;AAEA","sources":["webpack://map-chart-lib/./src/Map.stories.js","webpack://map-chart-lib/./src/components/Map/Map.tsx","webpack://map-chart-lib/./src/const/countryCodes.ts"],"sourcesContent":["import { Map } from \"./components/Map/Map\";\n\nconst meta = {\n  title: \"Example/Map\",\n  component: Map,\n  parameters: {\n    layout: 'centered',\n  },\n  tags: ['autodocs'],\n};\n\nexport default meta;\n\nexport const Default = {\n  args: {\n    width: 800,\n    height: 450\n  },\n};\n\nexport const CustomColors = {\n  args: {\n    width: 800,\n    height: 450,\n    landColor: \"#4CAF50\",\n    oceanColor: \"#2196F3\",\n    strokeColor: \"#333\"\n  },\n}; ;export const __namedExportsOrder = [\"Default\",\"CustomColors\"];","import React, { useEffect, useRef, useState } from \"react\";\nimport { select, zoom } from \"d3\";\nimport { geoPath, geoNaturalEarth1 } from \"d3-geo\";\nimport { feature } from \"topojson-client\";\nimport type { Feature, FeatureCollection, Geometry } from \"geojson\";\nimport { deriveCountryKeysFromFeature, pickStylesForCountry, CountryStylesMap } from \"../../const/countryCodes\";\n\n// JSON import için tsconfig.json'da \"resolveJsonModule\": true olmalı\nimport worldDataRaw from \"world-atlas/countries-110m.json\";\n\ninterface MapProps {\n  width?: number;\n  height?: number;\n  landColor?: string;\n  oceanColor?: string;\n  strokeColor?: string;\n  zoomEnabled?: boolean;\n  panEnabled?: boolean;\n  lineStrong?: number;\n  lineStyle?: \"solid\" | \"dashed\" | \"dotted\";\n  lineColor?: string;\n  countryStyles?: CountryStylesMap;\n  tooltipContent?: (name: string, feature: Feature) => string;\n}\n\ninterface TooltipState {\n  visible: boolean;\n  x: number;\n  y: number;\n  content: string;\n}\n\nexport const Map: React.FC<MapProps> = ({\n  width = 800,\n  height = 450,\n  landColor = \"#ddd\",\n  oceanColor = \"#f0f0f0\",\n  strokeColor = \"#000\",\n  zoomEnabled = true,\n  panEnabled = true,\n  lineStrong = 0.1,\n  lineStyle = \"solid\",\n  lineColor = \"#000\",\n  countryStyles = {},\n  tooltipContent = () => \"\",\n}) => {\n  const svgRef = useRef<SVGSVGElement | null>(null);\n  const gRef = useRef<SVGGElement | null>(null);\n\n  const [tooltip, setTooltip] = useState<TooltipState>({\n    visible: false,\n    x: 0,\n    y: 0,\n    content: \"\",\n  });\n\n  useEffect(() => {\n    if (!svgRef.current || !gRef.current) return;\n\n    const svg = select(svgRef.current);\n    const g = select(gRef.current);\n\n    if (zoomEnabled || panEnabled) {\n      const zoomBehavior = zoom<SVGSVGElement, unknown>().on(\"zoom\", (event) => {\n        g.attr(\"transform\", event.transform);\n      });\n\n      svg.call(zoomBehavior);\n    } else {\n      svg.on(\".zoom\", null);\n    }\n  }, [zoomEnabled, panEnabled]);\n\n  const countries: Feature[] = feature(\n    worldDataRaw as any,\n    (worldDataRaw as any).objects.countries\n  ).features;\n\n  const projection = geoNaturalEarth1().fitSize([width, height], { type: \"Sphere\" });\n  const pathGenerator = geoPath().projection(projection);\n\n  return (\n    <div style={{ position: \"relative\", width, height }}>\n      <svg\n        ref={svgRef}\n        width={width}\n        height={height}\n        style={{ border: `${lineStrong}px ${lineStyle} ${lineColor}`, display: \"block\" }}\n        onMouseLeave={() => setTooltip({ ...tooltip, visible: false })}\n      >\n        <g ref={gRef}>\n          {countries.map((country, i) => {\n            const id = (country as any).id || `country-${i}`;\n            const derived = deriveCountryKeysFromFeature(country);\n            const styles = pickStylesForCountry(countryStyles, derived);\n            const name = (country.properties as any)?.name || `Country ${id}`;\n\n            return (\n              <path\n                key={id}\n                d={pathGenerator(country as Feature<Geometry>) || \"\"}\n                fill={styles.fill || landColor}\n                fillOpacity={styles.fillOpacity != null ? styles.fillOpacity : 1.0}\n                stroke={styles.stroke || strokeColor}\n                strokeWidth={styles.strokeWidth || 0.1}\n                onMouseEnter={(e) =>\n                  setTooltip({\n                    visible: true,\n                    x: e.clientX,\n                    y: e.clientY,\n                    content: tooltipContent(name, country),\n                  })\n                }\n                onMouseMove={(e) =>\n                  setTooltip((prev) => ({\n                    ...prev,\n                    x: e.clientX,\n                    y: e.clientY,\n                  }))\n                }\n                onMouseLeave={() =>\n                  setTooltip((prev) => ({ ...prev, visible: false }))\n                }\n                onClick={\n                  styles.onClick\n                    ? () => {\n                        if (styles.onClick) {\n                          styles.onClick(country, name);\n                        }\n                      }\n                    : undefined\n                }\n              />\n            );\n          })}\n        </g>\n      </svg>\n\n      {tooltip.visible && svgRef.current && (\n        <div\n          style={{\n            position: \"absolute\",\n            top: tooltip.y - svgRef.current.getBoundingClientRect().top + 10,\n            left: tooltip.x - svgRef.current.getBoundingClientRect().left + 10,\n            background: \"rgba(0, 0, 0, 0.7)\",\n            color: \"#fff\",\n            padding: \"6px 10px\",\n            borderRadius: \"4px\",\n            pointerEvents: \"none\",\n            fontSize: \"14px\",\n            maxWidth: \"200px\",\n            zIndex: 10,\n          }}\n        >\n          {tooltip.content}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Map;\n","import countries from \"i18n-iso-countries\";\nimport enLocale from \"i18n-iso-countries/langs/en.json\";\nimport type { Feature } from \"geojson\";\n\n// Country styles tip tanımı\nexport interface CountryStyle {\n  fillOpacity: null;\n  fill?: string;\n  stroke?: string;\n  strokeWidth?: number;\n  onClick?: (feature: Feature, name: string) => void;\n}\n\nexport type CountryStylesMap = Record<string, CountryStyle>;\n\n// Register English locale for i18n-iso-countries lookups\ntry {\n  countries.registerLocale(enLocale);\n} catch {\n  // Zaten kayıtlıysa hata yutulur\n}\n\nexport interface DerivedCountryKeys {\n  id: string;\n  numeric3: string;\n  alpha2?: string;\n  alpha3?: string;\n}\n\nexport function deriveCountryKeysFromFeature(countryFeature: Feature): DerivedCountryKeys {\n  const rawId = (countryFeature as any)?.id;\n  const idAsString = rawId != null ? String(rawId) : \"\";\n  const numeric3 = idAsString.padStart(3, \"0\");\n\n  let alpha2: string | undefined;\n  let alpha3: string | undefined;\n\n  try {\n    alpha2 = countries.numericToAlpha2(numeric3);\n  } catch {\n    alpha2 = undefined;\n  }\n\n  try {\n    alpha3 = alpha2 ? countries.alpha2ToAlpha3(alpha2) : undefined;\n  } catch {\n    alpha3 = undefined;\n  }\n\n  return {\n    id: idAsString,\n    numeric3,\n    alpha2,\n    alpha3,\n  };\n}\n\nexport function pickStylesForCountry(\n  countryStyles: CountryStylesMap | undefined,\n  derivedKeys: DerivedCountryKeys\n): CountryStyle {\n  if (!countryStyles || typeof countryStyles !== \"object\") return {\n  fillOpacity: null\n};\n\n  const tryKey = (keyCandidate?: string) => {\n    if (!keyCandidate) return undefined;\n    if (countryStyles[keyCandidate] != null) return countryStyles[keyCandidate];\n    const upper = keyCandidate.toUpperCase();\n    const lower = keyCandidate.toLowerCase();\n    if (upper && countryStyles[upper] != null) return countryStyles[upper];\n    if (lower && countryStyles[lower] != null) return countryStyles[lower];\n    return undefined;\n  };\n\n  return (\n    tryKey(derivedKeys.alpha2) ||\n    tryKey(derivedKeys.alpha3) ||\n    tryKey(derivedKeys.numeric3) ||\n    tryKey(derivedKeys.id) ||\n    { fillOpacity: null }\n  );\n}\n"],"names":[],"sourceRoot":""}