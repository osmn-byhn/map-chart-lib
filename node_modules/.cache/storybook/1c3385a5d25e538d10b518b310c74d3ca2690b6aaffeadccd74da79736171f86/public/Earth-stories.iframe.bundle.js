"use strict";
(self["webpackChunkmap_chart_lib"] = self["webpackChunkmap_chart_lib"] || []).push([["Earth-stories"],{

/***/ "./src/Earth.stories.js":
/*!******************************!*\
  !*** ./src/Earth.stories.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CustomColors: () => (/* binding */ CustomColors),
/* harmony export */   Default: () => (/* binding */ Default),
/* harmony export */   __namedExportsOrder: () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _components_Earth_Earth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components/Earth/Earth */ "./src/components/Earth/Earth.tsx");

const meta = {
  title: "Example/Earth",
  component: _components_Earth_Earth__WEBPACK_IMPORTED_MODULE_0__["default"],
  parameters: {
    layout: 'centered'
  },
  tags: ['autodocs']
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (meta);
const Default = {
  args: {
    width: 800,
    height: 800
  }
};
const CustomColors = {
  args: {
    width: 800,
    height: 800,
    landColor: "#4CAF50",
    oceanColor: "#2196F3",
    strokeColor: "#333"
  }
};
;
const __namedExportsOrder = ["Default", "CustomColors"];
Default.parameters = {
  ...Default.parameters,
  docs: {
    ...Default.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    width: 800,\n    height: 800\n  }\n}",
      ...Default.parameters?.docs?.source
    }
  }
};
CustomColors.parameters = {
  ...CustomColors.parameters,
  docs: {
    ...CustomColors.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    width: 800,\n    height: 800,\n    landColor: \"#4CAF50\",\n    oceanColor: \"#2196F3\",\n    strokeColor: \"#333\"\n  }\n}",
      ...CustomColors.parameters?.docs?.source
    }
  }
};

/***/ }),

/***/ "./src/components/Earth/Earth.tsx":
/*!****************************************!*\
  !*** ./src/components/Earth/Earth.tsx ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var d3_geo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3-geo */ "./node_modules/d3-geo/src/path/index.js");
/* harmony import */ var d3_geo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3-geo */ "./node_modules/d3-geo/src/projection/orthographic.js");
/* harmony import */ var topojson_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! topojson-client */ "./node_modules/topojson-client/src/feature.js");
/* harmony import */ var world_atlas_countries_110m_json__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! world-atlas/countries-110m.json */ "./node_modules/world-atlas/countries-110m.json");
/* harmony import */ var _const_countryCodes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../const/countryCodes */ "./src/const/countryCodes.ts");






// Country type (topojson feature with optional props)

const Earth = ({
  width = 800,
  height = 800,
  landColor = "#4CAF50",
  oceanColor = "#2196F3",
  strokeColor = "#333",
  zoomEnabled = true,
  panEnabled = true,
  lineStrong = 0.1,
  lineStyle = "solid",
  lineColor = "#000",
  tooltipContent = () => "",
  countryStyles = {}
}) => {
  const canvasRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const rotationRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)([0, -30]);
  const scaleRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(1);
  const isDragging = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);
  const lastPos = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)([0, 0]);
  const [tooltip, setTooltip] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({
    visible: false,
    x: 0,
    y: 0,
    content: ""
  });
  const [hoveredCountry, setHoveredCountry] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    const canvas = canvasRef.current;
    if (!canvas) return;
    const context = canvas.getContext("2d");
    if (!context) return;
    const baseScale = height / 2.2;
    const projection = (0,d3_geo__WEBPACK_IMPORTED_MODULE_2__["default"])().scale(baseScale * scaleRef.current).translate([width / 2, height / 2]).rotate(rotationRef.current);
    const path = (0,d3_geo__WEBPACK_IMPORTED_MODULE_1__["default"])().projection(projection).context(context);
    const countries = (0,topojson_client__WEBPACK_IMPORTED_MODULE_3__["default"])(world_atlas_countries_110m_json__WEBPACK_IMPORTED_MODULE_4__, world_atlas_countries_110m_json__WEBPACK_IMPORTED_MODULE_4__.objects.countries).features;
    function drawGlobe() {
      if (!context) return;
      context.clearRect(0, 0, width, height);

      // Okyanus
      context.beginPath();
      context.fillStyle = oceanColor;
      context.arc(width / 2, height / 2, projection.scale() || 0, 0, 2 * Math.PI);
      context.fill();

      // Sphere Ã§izimi
      context.beginPath();
      path({
        type: "Sphere"
      });
      context.strokeStyle = strokeColor;
      context.lineWidth = 0.5;
      context.stroke();
      countries.forEach((feature, i) => {
        const id = feature.id || `country-${i}`;
        const derived = (0,_const_countryCodes__WEBPACK_IMPORTED_MODULE_5__.deriveCountryKeysFromFeature)(feature);
        const styles = (0,_const_countryCodes__WEBPACK_IMPORTED_MODULE_5__.pickStylesForCountry)(countryStyles, derived);
        context.beginPath();
        path(feature);
        let fillColor = styles.fill || landColor;
        if (hoveredCountry && hoveredCountry.id === id) {
          fillColor = styles.fill || landColor;
          context.globalAlpha = 0.8;
        }
        context.fillStyle = fillColor;
        context.fill();
        context.globalAlpha = 1.0;
        context.strokeStyle = styles.stroke || strokeColor;
        context.lineWidth = styles.strokeWidth || 0.3;
        context.stroke();
      });
    }
    let animationId;
    function animate() {
      const rot = rotationRef.current;
      rot[0] += 0.2;
      projection.rotate(rot);
      projection.scale(baseScale * scaleRef.current);
      drawGlobe();
      animationId = requestAnimationFrame(animate);
    }
    animate();
    const getMousePos = e => {
      const rect = canvas.getBoundingClientRect();
      return {
        x: e.clientX - rect.left,
        y: e.clientY - rect.top
      };
    };
    const getCountryAtPoint = (x, y) => {
      const point = projection.invert([x, y]);
      if (!point) return null;
      for (let i = 0; i < countries.length; i++) {
        const country = countries[i];
        if (path.area(country) > 0) {
          context.save();
          context.beginPath();
          path(country);
          if (context.isPointInPath(x, y)) {
            context.restore();
            return country;
          }
          context.restore();
        }
      }
      return null;
    };
    const handleMouseDown = e => {
      const mousePos = getMousePos(e);
      const country = getCountryAtPoint(mousePos.x, mousePos.y);
      if (country) {
        const id = country.id || `country-${countries.indexOf(country)}`;
        const derived = (0,_const_countryCodes__WEBPACK_IMPORTED_MODULE_5__.deriveCountryKeysFromFeature)(country);
        const styles = (0,_const_countryCodes__WEBPACK_IMPORTED_MODULE_5__.pickStylesForCountry)(countryStyles, derived);
        if (styles.onClick) {
          const name = country.properties?.name || `Country ${id}`;
          styles.onClick(country, name);
        }
      }
      isDragging.current = true;
      lastPos.current = [e.clientX, e.clientY];
    };
    const handleMouseMove = e => {
      if (!isDragging.current) {
        const mousePos = getMousePos(e);
        const country = getCountryAtPoint(mousePos.x, mousePos.y);
        if (country) {
          const name = country.properties?.name || `Country ${country.id}`;
          setTooltip({
            visible: true,
            x: e.clientX,
            y: e.clientY,
            content: tooltipContent(name, country)
          });
          setHoveredCountry(country);
        } else {
          setTooltip(prev => ({
            ...prev,
            visible: false
          }));
          setHoveredCountry(null);
        }
        return;
      }
      const dx = e.clientX - lastPos.current[0];
      const dy = e.clientY - lastPos.current[1];
      lastPos.current = [e.clientX, e.clientY];
      rotationRef.current[0] += dx * 0.5;
      rotationRef.current[1] -= dy * 0.5;
    };
    const handleMouseUp = () => {
      isDragging.current = false;
    };
    const handleMouseLeave = () => {
      isDragging.current = false;
      setTooltip(prev => ({
        ...prev,
        visible: false
      }));
      setHoveredCountry(null);
    };
    const handleWheel = e => {
      e.preventDefault();
      const zoomFactor = e.deltaY > 0 ? 0.9 : 1.1;
      scaleRef.current *= zoomFactor;
      scaleRef.current = Math.max(0.5, Math.min(3, scaleRef.current));
    };

    // Event binding
    canvas.addEventListener("mousedown", handleMouseDown);
    canvas.addEventListener("mousemove", handleMouseMove);
    canvas.addEventListener("mouseup", handleMouseUp);
    canvas.addEventListener("mouseleave", handleMouseLeave);
    canvas.addEventListener("wheel", handleWheel);

    // Touch events
    canvas.addEventListener("touchstart", e => {
      e.preventDefault();
      isDragging.current = true;
      const touch = e.touches[0];
      lastPos.current = [touch.clientX, touch.clientY];
    });
    canvas.addEventListener("touchmove", e => {
      e.preventDefault();
      if (!isDragging.current) return;
      const touch = e.touches[0];
      const dx = touch.clientX - lastPos.current[0];
      const dy = touch.clientY - lastPos.current[1];
      lastPos.current = [touch.clientX, touch.clientY];
      rotationRef.current[0] += dx * 0.5;
      rotationRef.current[1] -= dy * 0.5;
    });
    canvas.addEventListener("touchend", e => {
      e.preventDefault();
      isDragging.current = false;
    });
    return () => {
      cancelAnimationFrame(animationId);
      canvas.removeEventListener("wheel", handleWheel);
      canvas.removeEventListener("mousedown", handleMouseDown);
      canvas.removeEventListener("mousemove", handleMouseMove);
      canvas.removeEventListener("mouseup", handleMouseUp);
      canvas.removeEventListener("mouseleave", handleMouseLeave);
    };
  }, [width, height, landColor, oceanColor, strokeColor, tooltipContent, countryStyles, hoveredCountry]);
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
    style: {
      position: "relative",
      width,
      height
    }
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("canvas", {
    ref: canvasRef,
    width: width,
    height: height
  }), tooltip.visible && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
    style: {
      position: "absolute",
      top: tooltip.y - (canvasRef.current?.getBoundingClientRect().top || 0) + 10,
      left: tooltip.x - (canvasRef.current?.getBoundingClientRect().left || 0) + 10,
      background: "rgba(0, 0, 0, 0.7)",
      color: "#fff",
      padding: "6px 10px",
      borderRadius: "4px",
      pointerEvents: "none",
      fontSize: "14px",
      maxWidth: "200px",
      zIndex: 10
    }
  }, tooltip.content));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Earth);

/***/ }),

/***/ "./src/const/countryCodes.ts":
/*!***********************************!*\
  !*** ./src/const/countryCodes.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   deriveCountryKeysFromFeature: () => (/* binding */ deriveCountryKeysFromFeature),
/* harmony export */   pickStylesForCountry: () => (/* binding */ pickStylesForCountry)
/* harmony export */ });
/* harmony import */ var i18n_iso_countries__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! i18n-iso-countries */ "./node_modules/i18n-iso-countries/index.js");
/* harmony import */ var i18n_iso_countries_langs_en_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! i18n-iso-countries/langs/en.json */ "./node_modules/i18n-iso-countries/langs/en.json");



// Country styles tip tanÄ±mÄ±

// Register English locale for i18n-iso-countries lookups
try {
  i18n_iso_countries__WEBPACK_IMPORTED_MODULE_0__.registerLocale(i18n_iso_countries_langs_en_json__WEBPACK_IMPORTED_MODULE_1__);
} catch {
  // Zaten kayÄ±tlÄ±ysa hata yutulur
}
function deriveCountryKeysFromFeature(countryFeature) {
  const rawId = countryFeature?.id;
  const idAsString = rawId != null ? String(rawId) : "";
  const numeric3 = idAsString.padStart(3, "0");
  let alpha2;
  let alpha3;
  try {
    alpha2 = i18n_iso_countries__WEBPACK_IMPORTED_MODULE_0__.numericToAlpha2(numeric3);
  } catch {
    alpha2 = undefined;
  }
  try {
    alpha3 = alpha2 ? i18n_iso_countries__WEBPACK_IMPORTED_MODULE_0__.alpha2ToAlpha3(alpha2) : undefined;
  } catch {
    alpha3 = undefined;
  }
  return {
    id: idAsString,
    numeric3,
    alpha2,
    alpha3
  };
}
function pickStylesForCountry(countryStyles, derivedKeys) {
  if (!countryStyles || typeof countryStyles !== "object") return {
    fillOpacity: null
  };
  const tryKey = keyCandidate => {
    if (!keyCandidate) return undefined;
    if (countryStyles[keyCandidate] != null) return countryStyles[keyCandidate];
    const upper = keyCandidate.toUpperCase();
    const lower = keyCandidate.toLowerCase();
    if (upper && countryStyles[upper] != null) return countryStyles[upper];
    if (lower && countryStyles[lower] != null) return countryStyles[lower];
    return undefined;
  };
  return tryKey(derivedKeys.alpha2) || tryKey(derivedKeys.alpha3) || tryKey(derivedKeys.numeric3) || tryKey(derivedKeys.id) || {
    fillOpacity: null
  };
}

/***/ })

}]);
//# sourceMappingURL=Earth-stories.iframe.bundle.js.map