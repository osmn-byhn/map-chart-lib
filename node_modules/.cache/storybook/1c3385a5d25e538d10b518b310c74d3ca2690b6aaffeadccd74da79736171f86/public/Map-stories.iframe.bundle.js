"use strict";
(self["webpackChunkmap_chart_lib"] = self["webpackChunkmap_chart_lib"] || []).push([["Map-stories"],{

/***/ "./src/Map.stories.js":
/*!****************************!*\
  !*** ./src/Map.stories.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   CustomColors: () => (/* binding */ CustomColors),
/* harmony export */   Default: () => (/* binding */ Default),
/* harmony export */   __namedExportsOrder: () => (/* binding */ __namedExportsOrder),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _components_Map_Map__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./components/Map/Map */ "./src/components/Map/Map.tsx");

const meta = {
  title: "Example/Map",
  component: _components_Map_Map__WEBPACK_IMPORTED_MODULE_0__.Map,
  parameters: {
    layout: 'centered'
  },
  tags: ['autodocs']
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (meta);
const Default = {
  args: {
    width: 800,
    height: 450
  }
};
const CustomColors = {
  args: {
    width: 800,
    height: 450,
    landColor: "#4CAF50",
    oceanColor: "#2196F3",
    strokeColor: "#333"
  }
};
;
const __namedExportsOrder = ["Default", "CustomColors"];
Default.parameters = {
  ...Default.parameters,
  docs: {
    ...Default.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    width: 800,\n    height: 450\n  }\n}",
      ...Default.parameters?.docs?.source
    }
  }
};
CustomColors.parameters = {
  ...CustomColors.parameters,
  docs: {
    ...CustomColors.parameters?.docs,
    source: {
      originalSource: "{\n  args: {\n    width: 800,\n    height: 450,\n    landColor: \"#4CAF50\",\n    oceanColor: \"#2196F3\",\n    strokeColor: \"#333\"\n  }\n}",
      ...CustomColors.parameters?.docs?.source
    }
  }
};

/***/ }),

/***/ "./src/components/Map/Map.tsx":
/*!************************************!*\
  !*** ./src/components/Map/Map.tsx ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   Map: () => (/* binding */ Map),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! d3 */ "./node_modules/d3/src/index.js");
/* harmony import */ var d3_geo__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! d3-geo */ "./node_modules/d3-geo/src/path/index.js");
/* harmony import */ var d3_geo__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! d3-geo */ "./node_modules/d3-geo/src/projection/naturalEarth1.js");
/* harmony import */ var topojson_client__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! topojson-client */ "./node_modules/topojson-client/src/feature.js");
/* harmony import */ var _const_countryCodes__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../const/countryCodes */ "./src/const/countryCodes.ts");
/* harmony import */ var world_atlas_countries_110m_json__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! world-atlas/countries-110m.json */ "./node_modules/world-atlas/countries-110m.json");






// JSON import için tsconfig.json'da "resolveJsonModule": true olmalı

const Map = ({
  width = 800,
  height = 450,
  landColor = "#ddd",
  oceanColor = "#f0f0f0",
  strokeColor = "#000",
  zoomEnabled = true,
  panEnabled = true,
  lineStrong = 0.1,
  lineStyle = "solid",
  lineColor = "#000",
  countryStyles = {},
  tooltipContent = () => ""
}) => {
  const svgRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const gRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);
  const [tooltip, setTooltip] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({
    visible: false,
    x: 0,
    y: 0,
    content: ""
  });
  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {
    if (!svgRef.current || !gRef.current) return;
    const svg = (0,d3__WEBPACK_IMPORTED_MODULE_1__.select)(svgRef.current);
    const g = (0,d3__WEBPACK_IMPORTED_MODULE_1__.select)(gRef.current);
    if (zoomEnabled || panEnabled) {
      const zoomBehavior = (0,d3__WEBPACK_IMPORTED_MODULE_1__.zoom)().on("zoom", event => {
        g.attr("transform", event.transform);
      });
      svg.call(zoomBehavior);
    } else {
      svg.on(".zoom", null);
    }
  }, [zoomEnabled, panEnabled]);
  const countries = (0,topojson_client__WEBPACK_IMPORTED_MODULE_4__["default"])(world_atlas_countries_110m_json__WEBPACK_IMPORTED_MODULE_6__, world_atlas_countries_110m_json__WEBPACK_IMPORTED_MODULE_6__.objects.countries).features;
  const projection = (0,d3_geo__WEBPACK_IMPORTED_MODULE_3__["default"])().fitSize([width, height], {
    type: "Sphere"
  });
  const pathGenerator = (0,d3_geo__WEBPACK_IMPORTED_MODULE_2__["default"])().projection(projection);
  return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
    style: {
      position: "relative",
      width,
      height
    }
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("svg", {
    ref: svgRef,
    width: width,
    height: height,
    style: {
      border: `${lineStrong}px ${lineStyle} ${lineColor}`,
      display: "block"
    },
    onMouseLeave: () => setTooltip({
      ...tooltip,
      visible: false
    })
  }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("g", {
    ref: gRef
  }, countries.map((country, i) => {
    const id = country.id || `country-${i}`;
    const derived = (0,_const_countryCodes__WEBPACK_IMPORTED_MODULE_5__.deriveCountryKeysFromFeature)(country);
    const styles = (0,_const_countryCodes__WEBPACK_IMPORTED_MODULE_5__.pickStylesForCountry)(countryStyles, derived);
    const name = country.properties?.name || `Country ${id}`;
    return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("path", {
      key: id,
      d: pathGenerator(country) || "",
      fill: styles.fill || landColor,
      fillOpacity: styles.fillOpacity != null ? styles.fillOpacity : 1.0,
      stroke: styles.stroke || strokeColor,
      strokeWidth: styles.strokeWidth || 0.1,
      onMouseEnter: e => setTooltip({
        visible: true,
        x: e.clientX,
        y: e.clientY,
        content: tooltipContent(name, country)
      }),
      onMouseMove: e => setTooltip(prev => ({
        ...prev,
        x: e.clientX,
        y: e.clientY
      })),
      onMouseLeave: () => setTooltip(prev => ({
        ...prev,
        visible: false
      })),
      onClick: styles.onClick ? () => {
        if (styles.onClick) {
          styles.onClick(country, name);
        }
      } : undefined
    });
  }))), tooltip.visible && svgRef.current && /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0___default().createElement("div", {
    style: {
      position: "absolute",
      top: tooltip.y - svgRef.current.getBoundingClientRect().top + 10,
      left: tooltip.x - svgRef.current.getBoundingClientRect().left + 10,
      background: "rgba(0, 0, 0, 0.7)",
      color: "#fff",
      padding: "6px 10px",
      borderRadius: "4px",
      pointerEvents: "none",
      fontSize: "14px",
      maxWidth: "200px",
      zIndex: 10
    }
  }, tooltip.content));
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Map);

/***/ }),

/***/ "./src/const/countryCodes.ts":
/*!***********************************!*\
  !*** ./src/const/countryCodes.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   deriveCountryKeysFromFeature: () => (/* binding */ deriveCountryKeysFromFeature),
/* harmony export */   pickStylesForCountry: () => (/* binding */ pickStylesForCountry)
/* harmony export */ });
/* harmony import */ var i18n_iso_countries__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! i18n-iso-countries */ "./node_modules/i18n-iso-countries/index.js");
/* harmony import */ var i18n_iso_countries_langs_en_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! i18n-iso-countries/langs/en.json */ "./node_modules/i18n-iso-countries/langs/en.json");



// Country styles tip tanımı

// Register English locale for i18n-iso-countries lookups
try {
  i18n_iso_countries__WEBPACK_IMPORTED_MODULE_0__.registerLocale(i18n_iso_countries_langs_en_json__WEBPACK_IMPORTED_MODULE_1__);
} catch {
  // Zaten kayıtlıysa hata yutulur
}
function deriveCountryKeysFromFeature(countryFeature) {
  const rawId = countryFeature?.id;
  const idAsString = rawId != null ? String(rawId) : "";
  const numeric3 = idAsString.padStart(3, "0");
  let alpha2;
  let alpha3;
  try {
    alpha2 = i18n_iso_countries__WEBPACK_IMPORTED_MODULE_0__.numericToAlpha2(numeric3);
  } catch {
    alpha2 = undefined;
  }
  try {
    alpha3 = alpha2 ? i18n_iso_countries__WEBPACK_IMPORTED_MODULE_0__.alpha2ToAlpha3(alpha2) : undefined;
  } catch {
    alpha3 = undefined;
  }
  return {
    id: idAsString,
    numeric3,
    alpha2,
    alpha3
  };
}
function pickStylesForCountry(countryStyles, derivedKeys) {
  if (!countryStyles || typeof countryStyles !== "object") return {
    fillOpacity: null
  };
  const tryKey = keyCandidate => {
    if (!keyCandidate) return undefined;
    if (countryStyles[keyCandidate] != null) return countryStyles[keyCandidate];
    const upper = keyCandidate.toUpperCase();
    const lower = keyCandidate.toLowerCase();
    if (upper && countryStyles[upper] != null) return countryStyles[upper];
    if (lower && countryStyles[lower] != null) return countryStyles[lower];
    return undefined;
  };
  return tryKey(derivedKeys.alpha2) || tryKey(derivedKeys.alpha3) || tryKey(derivedKeys.numeric3) || tryKey(derivedKeys.id) || {
    fillOpacity: null
  };
}

/***/ })

}]);
//# sourceMappingURL=Map-stories.iframe.bundle.js.map